
Work Station Controls Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  0000053c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002042c  2**0
                  CONTENTS
  3 .bss          00000040  2000042c  00000968  0002042c  2**2
                  ALLOC
  4 .stack        00002004  2000046c  000009a8  0002042c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006512  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000078e  00000000  00000000  000269bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000141  00000000  00000000  0002714d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000d0  00000000  00000000  0002728e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0002735e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013aaa  00000000  00000000  000273ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001d99  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007c104  00000000  00000000  0003cc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000308  00000000  00000000  000b8d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 24 00 20 85 01 00 00 81 01 00 00 81 01 00 00     p$. ............
	...
  2c:	81 01 00 00 00 00 00 00 00 00 00 00 81 01 00 00     ................
  3c:	81 01 00 00 81 01 00 00 81 01 00 00 81 01 00 00     ................
  4c:	81 01 00 00 81 01 00 00 81 01 00 00 81 01 00 00     ................
  5c:	81 01 00 00 81 01 00 00 81 01 00 00 81 01 00 00     ................
  6c:	81 01 00 00 81 01 00 00 81 01 00 00 81 01 00 00     ................
  7c:	81 01 00 00 81 01 00 00 81 01 00 00 81 01 00 00     ................
	...
  94:	81 01 00 00 81 01 00 00 81 01 00 00 81 01 00 00     ................
  a4:	81 01 00 00 81 01 00 00 81 01 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000042c 	.word	0x2000042c
  d4:	00000000 	.word	0x00000000
  d8:	0000053c 	.word	0x0000053c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000430 	.word	0x20000430
 108:	0000053c 	.word	0x0000053c
 10c:	0000053c 	.word	0x0000053c
 110:	00000000 	.word	0x00000000

00000114 <adc_initalise>:

#include "adc.h"

void adc_initalise(void){
	/* Configure ADC Clock */
	MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;
 114:	4a0d      	ldr	r2, [pc, #52]	; (14c <adc_initalise+0x38>)
 116:	6a13      	ldr	r3, [r2, #32]
 118:	2108      	movs	r1, #8
 11a:	430b      	orrs	r3, r1
 11c:	6213      	str	r3, [r2, #32]
	GCLK->PCHCTRL[ADC_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN; // Set SERCOM3 Peripheral Clock to use Generic Clock 0
 11e:	3138      	adds	r1, #56	; 0x38
 120:	23f8      	movs	r3, #248	; 0xf8
 122:	4a0b      	ldr	r2, [pc, #44]	; (150 <adc_initalise+0x3c>)
 124:	50d1      	str	r1, [r2, r3]
	while (0 == (GCLK->PCHCTRL[ADC_GCLK_ID].reg & GCLK_PCHCTRL_CHEN)); // Wait until generic peripheral clock connected to SERCOM3
 126:	0010      	movs	r0, r2
 128:	31b8      	adds	r1, #184	; 0xb8
 12a:	2240      	movs	r2, #64	; 0x40
 12c:	5843      	ldr	r3, [r0, r1]
 12e:	421a      	tst	r2, r3
 130:	d0fc      	beq.n	12c <adc_initalise+0x18>
		
	/* Configure ADC */
	ADC->CTRLA.reg = 0;			// Reset
 132:	4b08      	ldr	r3, [pc, #32]	; (154 <adc_initalise+0x40>)
 134:	2200      	movs	r2, #0
 136:	701a      	strb	r2, [r3, #0]
	ADC->CTRLB.reg = 0;			// Prescaler set to Divide By 2
 138:	705a      	strb	r2, [r3, #1]
	ADC->REFCTRL.reg = 0x03;	// VREFA
 13a:	2103      	movs	r1, #3
 13c:	7099      	strb	r1, [r3, #2]
	ADC->CTRLC.reg = 0;
 13e:	815a      	strh	r2, [r3, #10]
	ADC->CTRLA.reg |= ADC_CTRLA_ENABLE;
 140:	781a      	ldrb	r2, [r3, #0]
 142:	3901      	subs	r1, #1
 144:	430a      	orrs	r2, r1
 146:	701a      	strb	r2, [r3, #0]
}
 148:	4770      	bx	lr
 14a:	46c0      	nop			; (mov r8, r8)
 14c:	40000400 	.word	0x40000400
 150:	40001800 	.word	0x40001800
 154:	43000c00 	.word	0x43000c00

00000158 <adc_read_channel>:

uint16_t adc_read_channel(uint8_t channel){
	/* Configure Channel */
	ADC->INPUTCTRL.reg = (0x18<<8)|(channel);
 158:	23c0      	movs	r3, #192	; 0xc0
 15a:	015b      	lsls	r3, r3, #5
 15c:	4318      	orrs	r0, r3
 15e:	4b07      	ldr	r3, [pc, #28]	; (17c <adc_read_channel+0x24>)
 160:	8118      	strh	r0, [r3, #8]
	ADC->SWTRIG.reg = ADC_SWTRIG_START;
 162:	2202      	movs	r2, #2
 164:	761a      	strb	r2, [r3, #24]
	while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY));
 166:	0019      	movs	r1, r3
 168:	3a01      	subs	r2, #1
 16a:	798b      	ldrb	r3, [r1, #6]
 16c:	4213      	tst	r3, r2
 16e:	d0fc      	beq.n	16a <adc_read_channel+0x12>
	return 0xFFF&ADC->RESULT.reg;
 170:	4b02      	ldr	r3, [pc, #8]	; (17c <adc_read_channel+0x24>)
 172:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 174:	0500      	lsls	r0, r0, #20
 176:	0d00      	lsrs	r0, r0, #20
 178:	4770      	bx	lr
 17a:	46c0      	nop			; (mov r8, r8)
 17c:	43000c00 	.word	0x43000c00

00000180 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 180:	e7fe      	b.n	180 <Dummy_Handler>
	...

00000184 <Reset_Handler>:
{
 184:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 186:	4a1a      	ldr	r2, [pc, #104]	; (1f0 <Reset_Handler+0x6c>)
 188:	4b1a      	ldr	r3, [pc, #104]	; (1f4 <Reset_Handler+0x70>)
 18a:	429a      	cmp	r2, r3
 18c:	d011      	beq.n	1b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 18e:	001a      	movs	r2, r3
 190:	4b19      	ldr	r3, [pc, #100]	; (1f8 <Reset_Handler+0x74>)
 192:	429a      	cmp	r2, r3
 194:	d20d      	bcs.n	1b2 <Reset_Handler+0x2e>
 196:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0x78>)
 198:	3303      	adds	r3, #3
 19a:	1a9b      	subs	r3, r3, r2
 19c:	089b      	lsrs	r3, r3, #2
 19e:	3301      	adds	r3, #1
 1a0:	009b      	lsls	r3, r3, #2
 1a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 1a4:	4813      	ldr	r0, [pc, #76]	; (1f4 <Reset_Handler+0x70>)
 1a6:	4912      	ldr	r1, [pc, #72]	; (1f0 <Reset_Handler+0x6c>)
 1a8:	588c      	ldr	r4, [r1, r2]
 1aa:	5084      	str	r4, [r0, r2]
 1ac:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 1ae:	429a      	cmp	r2, r3
 1b0:	d1fa      	bne.n	1a8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 1b2:	4a13      	ldr	r2, [pc, #76]	; (200 <Reset_Handler+0x7c>)
 1b4:	4b13      	ldr	r3, [pc, #76]	; (204 <Reset_Handler+0x80>)
 1b6:	429a      	cmp	r2, r3
 1b8:	d20a      	bcs.n	1d0 <Reset_Handler+0x4c>
 1ba:	43d3      	mvns	r3, r2
 1bc:	4911      	ldr	r1, [pc, #68]	; (204 <Reset_Handler+0x80>)
 1be:	185b      	adds	r3, r3, r1
 1c0:	2103      	movs	r1, #3
 1c2:	438b      	bics	r3, r1
 1c4:	3304      	adds	r3, #4
 1c6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 1c8:	2100      	movs	r1, #0
 1ca:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 1cc:	4293      	cmp	r3, r2
 1ce:	d1fc      	bne.n	1ca <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 1d0:	4a0d      	ldr	r2, [pc, #52]	; (208 <Reset_Handler+0x84>)
 1d2:	21ff      	movs	r1, #255	; 0xff
 1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <Reset_Handler+0x88>)
 1d6:	438b      	bics	r3, r1
 1d8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1da:	4a0d      	ldr	r2, [pc, #52]	; (210 <Reset_Handler+0x8c>)
 1dc:	6853      	ldr	r3, [r2, #4]
 1de:	397f      	subs	r1, #127	; 0x7f
 1e0:	430b      	orrs	r3, r1
 1e2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1e4:	4b0b      	ldr	r3, [pc, #44]	; (214 <Reset_Handler+0x90>)
 1e6:	4798      	blx	r3
        main();
 1e8:	4b0b      	ldr	r3, [pc, #44]	; (218 <Reset_Handler+0x94>)
 1ea:	4798      	blx	r3
 1ec:	e7fe      	b.n	1ec <Reset_Handler+0x68>
 1ee:	46c0      	nop			; (mov r8, r8)
 1f0:	0000053c 	.word	0x0000053c
 1f4:	20000000 	.word	0x20000000
 1f8:	2000042c 	.word	0x2000042c
 1fc:	20000004 	.word	0x20000004
 200:	2000042c 	.word	0x2000042c
 204:	2000046c 	.word	0x2000046c
 208:	e000ed00 	.word	0xe000ed00
 20c:	00000000 	.word	0x00000000
 210:	41004000 	.word	0x41004000
 214:	00000375 	.word	0x00000375
 218:	00000351 	.word	0x00000351

0000021c <fan_init_control_switch>:
#include "fan.h"
#include "adc.h"

void fan_init_control_switch(void){
	/* Set up Fan On Switch */
	PORT->Group[0].DIRCLR.reg = (1<<25);
 21c:	4b03      	ldr	r3, [pc, #12]	; (22c <fan_init_control_switch+0x10>)
 21e:	2280      	movs	r2, #128	; 0x80
 220:	0492      	lsls	r2, r2, #18
 222:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[25].reg = PORT_PINCFG_INEN;
 224:	2102      	movs	r1, #2
 226:	2259      	movs	r2, #89	; 0x59
 228:	5499      	strb	r1, [r3, r2]
}
 22a:	4770      	bx	lr
 22c:	40002800 	.word	0x40002800

00000230 <fan_init_power_pot>:

void fan_init_power_pot(void){
	/* Configure fan adc for reading control potentiometer */
	PORT->Group[0].DIRCLR.reg = (1<<7);
 230:	4b05      	ldr	r3, [pc, #20]	; (248 <fan_init_power_pot+0x18>)
 232:	2280      	movs	r2, #128	; 0x80
 234:	605a      	str	r2, [r3, #4]
	PORT->Group[0].PINCFG[7].reg = PORT_PINCFG_PMUXEN;
 236:	2101      	movs	r1, #1
 238:	3a39      	subs	r2, #57	; 0x39
 23a:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[3].reg |= (0x01<<4);
 23c:	3132      	adds	r1, #50	; 0x32
 23e:	5c5a      	ldrb	r2, [r3, r1]
 240:	2010      	movs	r0, #16
 242:	4302      	orrs	r2, r0
 244:	545a      	strb	r2, [r3, r1]
}
 246:	4770      	bx	lr
 248:	40002800 	.word	0x40002800

0000024c <fan_init_pwm>:

void fan_init_pwm(void){
	/* Configure fan io pins */
	PORT->Group[0].DIRSET.reg = (1<<19);
 24c:	4b17      	ldr	r3, [pc, #92]	; (2ac <fan_init_pwm+0x60>)
 24e:	2280      	movs	r2, #128	; 0x80
 250:	0312      	lsls	r2, r2, #12
 252:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[19].reg = PORT_PINCFG_PMUXEN;
 254:	2101      	movs	r1, #1
 256:	2253      	movs	r2, #83	; 0x53
 258:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[9].reg |= (0x05<<4);					//PMUX F - TCC0/WO3
 25a:	3138      	adds	r1, #56	; 0x38
 25c:	5c5a      	ldrb	r2, [r3, r1]
 25e:	2050      	movs	r0, #80	; 0x50
 260:	4302      	orrs	r2, r0
 262:	545a      	strb	r2, [r3, r1]
	
	/* Configure TCC0 Clock */
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TCC0;
 264:	4a12      	ldr	r2, [pc, #72]	; (2b0 <fan_init_pwm+0x64>)
 266:	69d3      	ldr	r3, [r2, #28]
 268:	3919      	subs	r1, #25
 26a:	430b      	orrs	r3, r1
 26c:	61d3      	str	r3, [r2, #28]
	GCLK->PCHCTRL[TCC0_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
 26e:	3120      	adds	r1, #32
 270:	23e4      	movs	r3, #228	; 0xe4
 272:	4a10      	ldr	r2, [pc, #64]	; (2b4 <fan_init_pwm+0x68>)
 274:	50d1      	str	r1, [r2, r3]
	while (0 == (GCLK->PCHCTRL[TCC0_GCLK_ID].reg & GCLK_PCHCTRL_CHEN));
 276:	0010      	movs	r0, r2
 278:	31a4      	adds	r1, #164	; 0xa4
 27a:	2240      	movs	r2, #64	; 0x40
 27c:	5843      	ldr	r3, [r0, r1]
 27e:	421a      	tst	r2, r3
 280:	d0fc      	beq.n	27c <fan_init_pwm+0x30>
	
	/* Configure TCC0 */
	TCC0->CTRLA.reg  = 0;
 282:	4b0d      	ldr	r3, [pc, #52]	; (2b8 <fan_init_pwm+0x6c>)
 284:	2200      	movs	r2, #0
 286:	601a      	str	r2, [r3, #0]
	//TCC0->CTRLA.reg |= 0x7 << 8;
	
	TCC0->WAVE.reg = TCC_WAVE_WAVEGEN_NPWM;
 288:	2102      	movs	r1, #2
 28a:	63d9      	str	r1, [r3, #60]	; 0x3c
	TCC0->PER.reg = TCC_PER_PER(0xFF);
 28c:	32ff      	adds	r2, #255	; 0xff
 28e:	641a      	str	r2, [r3, #64]	; 0x40
	TCC0->CC[3].reg = TCC_CC_CC(128);
 290:	3a7f      	subs	r2, #127	; 0x7f
 292:	651a      	str	r2, [r3, #80]	; 0x50
	TCC0->CC[2].reg = TCC_CC_CC(128);
 294:	64da      	str	r2, [r3, #76]	; 0x4c
	TCC0->CC[1].reg = TCC_CC_CC(128);
 296:	649a      	str	r2, [r3, #72]	; 0x48
	TCC0->CC[0].reg = TCC_CC_CC(128);
 298:	645a      	str	r2, [r3, #68]	; 0x44
	TCC0->EVCTRL.reg = TCC_EVCTRL_TCEI1 | TCC_EVCTRL_TCEI0 | TCC_EVCTRL_CNTEO | TCC_EVCTRL_EVACT1_RETRIGGER | TCC_EVCTRL_EVACT0_COUNTEV;
 29a:	4a08      	ldr	r2, [pc, #32]	; (2bc <fan_init_pwm+0x70>)
 29c:	621a      	str	r2, [r3, #32]
	TCC0->CTRLA.reg |= TCC_CTRLA_ENABLE;
 29e:	681a      	ldr	r2, [r3, #0]
 2a0:	430a      	orrs	r2, r1
 2a2:	601a      	str	r2, [r3, #0]
	
	
	TCC0->CTRLBSET.reg = 0x1<<5;
 2a4:	2220      	movs	r2, #32
 2a6:	715a      	strb	r2, [r3, #5]
	
	
}
 2a8:	4770      	bx	lr
 2aa:	46c0      	nop			; (mov r8, r8)
 2ac:	40002800 	.word	0x40002800
 2b0:	40000400 	.word	0x40000400
 2b4:	40001800 	.word	0x40001800
 2b8:	42001400 	.word	0x42001400
 2bc:	0000c40a 	.word	0x0000c40a

000002c0 <fan_initialise>:

void fan_set_pwm(uint8_t val){
	TCC0->CC[3].reg = ((uint32_t)val)<<6;
}

void fan_initialise(void){
 2c0:	b510      	push	{r4, lr}
	fan_init_control_switch();
 2c2:	4b03      	ldr	r3, [pc, #12]	; (2d0 <fan_initialise+0x10>)
 2c4:	4798      	blx	r3
	fan_init_power_pot();
 2c6:	4b03      	ldr	r3, [pc, #12]	; (2d4 <fan_initialise+0x14>)
 2c8:	4798      	blx	r3
	fan_init_pwm();
 2ca:	4b03      	ldr	r3, [pc, #12]	; (2d8 <fan_initialise+0x18>)
 2cc:	4798      	blx	r3
}
 2ce:	bd10      	pop	{r4, pc}
 2d0:	0000021d 	.word	0x0000021d
 2d4:	00000231 	.word	0x00000231
 2d8:	0000024d 	.word	0x0000024d

000002dc <fan_read_control_switch>:

uint8_t fan_read_control_switch(void){
	if(PORT->Group[0].IN.reg & (1<<25)){
 2dc:	4b02      	ldr	r3, [pc, #8]	; (2e8 <fan_read_control_switch+0xc>)
 2de:	6a18      	ldr	r0, [r3, #32]
 2e0:	0180      	lsls	r0, r0, #6
 2e2:	0fc0      	lsrs	r0, r0, #31
		return 1;
	} else {
		return 0;
	}
}
 2e4:	4770      	bx	lr
 2e6:	46c0      	nop			; (mov r8, r8)
 2e8:	40002800 	.word	0x40002800

000002ec <fan_read_power_pot>:

uint16_t fan_read_power_pot(void){
 2ec:	b510      	push	{r4, lr}
	return adc_read_channel(0x07);
 2ee:	2007      	movs	r0, #7
 2f0:	4b01      	ldr	r3, [pc, #4]	; (2f8 <fan_read_power_pot+0xc>)
 2f2:	4798      	blx	r3
}
 2f4:	bd10      	pop	{r4, pc}
 2f6:	46c0      	nop			; (mov r8, r8)
 2f8:	00000159 	.word	0x00000159

000002fc <fan_process>:

void fan_process(void){
 2fc:	b510      	push	{r4, lr}
	if(fan_read_control_switch()){
 2fe:	4b08      	ldr	r3, [pc, #32]	; (320 <fan_process+0x24>)
 300:	4798      	blx	r3
 302:	2800      	cmp	r0, #0
 304:	d104      	bne.n	310 <fan_process+0x14>
	TCC0->CC[3].reg = ((uint32_t)val)<<6;
 306:	2280      	movs	r2, #128	; 0x80
 308:	0192      	lsls	r2, r2, #6
 30a:	4b06      	ldr	r3, [pc, #24]	; (324 <fan_process+0x28>)
 30c:	651a      	str	r2, [r3, #80]	; 0x50
		uint8_t fanPower = (uint8_t)(adcVal>>4);
		fan_set_pwm(fanPower);
	} else {
		fan_set_pwm(0200);
	}
}
 30e:	bd10      	pop	{r4, pc}
		uint16_t adcVal = fan_read_power_pot();
 310:	4b05      	ldr	r3, [pc, #20]	; (328 <fan_process+0x2c>)
 312:	4798      	blx	r3
		uint8_t fanPower = (uint8_t)(adcVal>>4);
 314:	0900      	lsrs	r0, r0, #4
	TCC0->CC[3].reg = ((uint32_t)val)<<6;
 316:	b2c0      	uxtb	r0, r0
 318:	0180      	lsls	r0, r0, #6
 31a:	4b02      	ldr	r3, [pc, #8]	; (324 <fan_process+0x28>)
 31c:	6518      	str	r0, [r3, #80]	; 0x50
 31e:	e7f6      	b.n	30e <fan_process+0x12>
 320:	000002dd 	.word	0x000002dd
 324:	42001400 	.word	0x42001400
 328:	000002ed 	.word	0x000002ed

0000032c <sys_init>:


void sys_init(void)
{
	// Switch to 16MHz clock (disable prescaler)
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL_OSC16MCTRL_ENABLE | OSCCTRL_OSC16MCTRL_FSEL_16;
 32c:	220e      	movs	r2, #14
 32e:	4b07      	ldr	r3, [pc, #28]	; (34c <sys_init+0x20>)
 330:	751a      	strb	r2, [r3, #20]

	// Switch to the highest performance level
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
 332:	2380      	movs	r3, #128	; 0x80
 334:	05db      	lsls	r3, r3, #23
 336:	3a0d      	subs	r2, #13
 338:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = PM_PLCFG_PLSEL_PL2_Val;
 33a:	3201      	adds	r2, #1
 33c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg);
 33e:	001a      	movs	r2, r3
 340:	7993      	ldrb	r3, [r2, #6]
 342:	2b00      	cmp	r3, #0
 344:	d0fc      	beq.n	340 <sys_init+0x14>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 346:	b662      	cpsie	i

	// Enable interrupts
	__enable_irq();
}
 348:	4770      	bx	lr
 34a:	46c0      	nop			; (mov r8, r8)
 34c:	40000c00 	.word	0x40000c00

00000350 <main>:

int main(void)
{
 350:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    sys_init();
 352:	4b04      	ldr	r3, [pc, #16]	; (364 <main+0x14>)
 354:	4798      	blx	r3

	/* Enable Peripherals */
	adc_initalise();
 356:	4b04      	ldr	r3, [pc, #16]	; (368 <main+0x18>)
 358:	4798      	blx	r3
	fan_initialise();
 35a:	4b04      	ldr	r3, [pc, #16]	; (36c <main+0x1c>)
 35c:	4798      	blx	r3

    /* Replace with your application code */
    while (1) 
    {
		fan_process();
 35e:	4c04      	ldr	r4, [pc, #16]	; (370 <main+0x20>)
 360:	47a0      	blx	r4
 362:	e7fd      	b.n	360 <main+0x10>
 364:	0000032d 	.word	0x0000032d
 368:	00000115 	.word	0x00000115
 36c:	000002c1 	.word	0x000002c1
 370:	000002fd 	.word	0x000002fd

00000374 <__libc_init_array>:
 374:	b570      	push	{r4, r5, r6, lr}
 376:	4e0d      	ldr	r6, [pc, #52]	; (3ac <__libc_init_array+0x38>)
 378:	4d0d      	ldr	r5, [pc, #52]	; (3b0 <__libc_init_array+0x3c>)
 37a:	2400      	movs	r4, #0
 37c:	1bad      	subs	r5, r5, r6
 37e:	10ad      	asrs	r5, r5, #2
 380:	d005      	beq.n	38e <__libc_init_array+0x1a>
 382:	00a3      	lsls	r3, r4, #2
 384:	58f3      	ldr	r3, [r6, r3]
 386:	3401      	adds	r4, #1
 388:	4798      	blx	r3
 38a:	42a5      	cmp	r5, r4
 38c:	d1f9      	bne.n	382 <__libc_init_array+0xe>
 38e:	f000 f8c3 	bl	518 <_init>
 392:	4e08      	ldr	r6, [pc, #32]	; (3b4 <__libc_init_array+0x40>)
 394:	4d08      	ldr	r5, [pc, #32]	; (3b8 <__libc_init_array+0x44>)
 396:	2400      	movs	r4, #0
 398:	1bad      	subs	r5, r5, r6
 39a:	10ad      	asrs	r5, r5, #2
 39c:	d005      	beq.n	3aa <__libc_init_array+0x36>
 39e:	00a3      	lsls	r3, r4, #2
 3a0:	58f3      	ldr	r3, [r6, r3]
 3a2:	3401      	adds	r4, #1
 3a4:	4798      	blx	r3
 3a6:	42a5      	cmp	r5, r4
 3a8:	d1f9      	bne.n	39e <__libc_init_array+0x2a>
 3aa:	bd70      	pop	{r4, r5, r6, pc}
 3ac:	00000524 	.word	0x00000524
 3b0:	00000524 	.word	0x00000524
 3b4:	00000524 	.word	0x00000524
 3b8:	0000052c 	.word	0x0000052c

000003bc <register_fini>:
 3bc:	4b03      	ldr	r3, [pc, #12]	; (3cc <register_fini+0x10>)
 3be:	b510      	push	{r4, lr}
 3c0:	2b00      	cmp	r3, #0
 3c2:	d002      	beq.n	3ca <register_fini+0xe>
 3c4:	4802      	ldr	r0, [pc, #8]	; (3d0 <register_fini+0x14>)
 3c6:	f000 f805 	bl	3d4 <atexit>
 3ca:	bd10      	pop	{r4, pc}
 3cc:	00000000 	.word	0x00000000
 3d0:	000003e5 	.word	0x000003e5

000003d4 <atexit>:
 3d4:	b510      	push	{r4, lr}
 3d6:	0001      	movs	r1, r0
 3d8:	2300      	movs	r3, #0
 3da:	2200      	movs	r2, #0
 3dc:	2000      	movs	r0, #0
 3de:	f000 f81f 	bl	420 <__register_exitproc>
 3e2:	bd10      	pop	{r4, pc}

000003e4 <__libc_fini_array>:
 3e4:	b570      	push	{r4, r5, r6, lr}
 3e6:	4b09      	ldr	r3, [pc, #36]	; (40c <__libc_fini_array+0x28>)
 3e8:	4c09      	ldr	r4, [pc, #36]	; (410 <__libc_fini_array+0x2c>)
 3ea:	1ae4      	subs	r4, r4, r3
 3ec:	10a4      	asrs	r4, r4, #2
 3ee:	d009      	beq.n	404 <__libc_fini_array+0x20>
 3f0:	4a08      	ldr	r2, [pc, #32]	; (414 <__libc_fini_array+0x30>)
 3f2:	18a5      	adds	r5, r4, r2
 3f4:	00ad      	lsls	r5, r5, #2
 3f6:	18ed      	adds	r5, r5, r3
 3f8:	682b      	ldr	r3, [r5, #0]
 3fa:	3c01      	subs	r4, #1
 3fc:	4798      	blx	r3
 3fe:	3d04      	subs	r5, #4
 400:	2c00      	cmp	r4, #0
 402:	d1f9      	bne.n	3f8 <__libc_fini_array+0x14>
 404:	f000 f892 	bl	52c <_fini>
 408:	bd70      	pop	{r4, r5, r6, pc}
 40a:	46c0      	nop			; (mov r8, r8)
 40c:	00000538 	.word	0x00000538
 410:	0000053c 	.word	0x0000053c
 414:	3fffffff 	.word	0x3fffffff

00000418 <__retarget_lock_acquire_recursive>:
 418:	4770      	bx	lr
 41a:	46c0      	nop			; (mov r8, r8)

0000041c <__retarget_lock_release_recursive>:
 41c:	4770      	bx	lr
 41e:	46c0      	nop			; (mov r8, r8)

00000420 <__register_exitproc>:
 420:	b5f0      	push	{r4, r5, r6, r7, lr}
 422:	464e      	mov	r6, r9
 424:	4645      	mov	r5, r8
 426:	46de      	mov	lr, fp
 428:	4657      	mov	r7, sl
 42a:	b5e0      	push	{r5, r6, r7, lr}
 42c:	4d36      	ldr	r5, [pc, #216]	; (508 <__register_exitproc+0xe8>)
 42e:	b083      	sub	sp, #12
 430:	0006      	movs	r6, r0
 432:	6828      	ldr	r0, [r5, #0]
 434:	4698      	mov	r8, r3
 436:	000f      	movs	r7, r1
 438:	4691      	mov	r9, r2
 43a:	f7ff ffed 	bl	418 <__retarget_lock_acquire_recursive>
 43e:	4b33      	ldr	r3, [pc, #204]	; (50c <__register_exitproc+0xec>)
 440:	681c      	ldr	r4, [r3, #0]
 442:	23a4      	movs	r3, #164	; 0xa4
 444:	005b      	lsls	r3, r3, #1
 446:	58e0      	ldr	r0, [r4, r3]
 448:	2800      	cmp	r0, #0
 44a:	d052      	beq.n	4f2 <__register_exitproc+0xd2>
 44c:	6843      	ldr	r3, [r0, #4]
 44e:	2b1f      	cmp	r3, #31
 450:	dc13      	bgt.n	47a <__register_exitproc+0x5a>
 452:	1c5a      	adds	r2, r3, #1
 454:	9201      	str	r2, [sp, #4]
 456:	2e00      	cmp	r6, #0
 458:	d128      	bne.n	4ac <__register_exitproc+0x8c>
 45a:	9a01      	ldr	r2, [sp, #4]
 45c:	3302      	adds	r3, #2
 45e:	009b      	lsls	r3, r3, #2
 460:	6042      	str	r2, [r0, #4]
 462:	501f      	str	r7, [r3, r0]
 464:	6828      	ldr	r0, [r5, #0]
 466:	f7ff ffd9 	bl	41c <__retarget_lock_release_recursive>
 46a:	2000      	movs	r0, #0
 46c:	b003      	add	sp, #12
 46e:	bc3c      	pop	{r2, r3, r4, r5}
 470:	4690      	mov	r8, r2
 472:	4699      	mov	r9, r3
 474:	46a2      	mov	sl, r4
 476:	46ab      	mov	fp, r5
 478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 47a:	4b25      	ldr	r3, [pc, #148]	; (510 <__register_exitproc+0xf0>)
 47c:	2b00      	cmp	r3, #0
 47e:	d03d      	beq.n	4fc <__register_exitproc+0xdc>
 480:	20c8      	movs	r0, #200	; 0xc8
 482:	0040      	lsls	r0, r0, #1
 484:	e000      	b.n	488 <__register_exitproc+0x68>
 486:	bf00      	nop
 488:	2800      	cmp	r0, #0
 48a:	d037      	beq.n	4fc <__register_exitproc+0xdc>
 48c:	22a4      	movs	r2, #164	; 0xa4
 48e:	2300      	movs	r3, #0
 490:	0052      	lsls	r2, r2, #1
 492:	58a1      	ldr	r1, [r4, r2]
 494:	6043      	str	r3, [r0, #4]
 496:	6001      	str	r1, [r0, #0]
 498:	50a0      	str	r0, [r4, r2]
 49a:	3240      	adds	r2, #64	; 0x40
 49c:	5083      	str	r3, [r0, r2]
 49e:	3204      	adds	r2, #4
 4a0:	5083      	str	r3, [r0, r2]
 4a2:	3301      	adds	r3, #1
 4a4:	9301      	str	r3, [sp, #4]
 4a6:	2300      	movs	r3, #0
 4a8:	2e00      	cmp	r6, #0
 4aa:	d0d6      	beq.n	45a <__register_exitproc+0x3a>
 4ac:	009a      	lsls	r2, r3, #2
 4ae:	4692      	mov	sl, r2
 4b0:	4482      	add	sl, r0
 4b2:	464a      	mov	r2, r9
 4b4:	2188      	movs	r1, #136	; 0x88
 4b6:	4654      	mov	r4, sl
 4b8:	5062      	str	r2, [r4, r1]
 4ba:	22c4      	movs	r2, #196	; 0xc4
 4bc:	0052      	lsls	r2, r2, #1
 4be:	4691      	mov	r9, r2
 4c0:	4481      	add	r9, r0
 4c2:	464a      	mov	r2, r9
 4c4:	3987      	subs	r1, #135	; 0x87
 4c6:	4099      	lsls	r1, r3
 4c8:	6812      	ldr	r2, [r2, #0]
 4ca:	468b      	mov	fp, r1
 4cc:	430a      	orrs	r2, r1
 4ce:	4694      	mov	ip, r2
 4d0:	464a      	mov	r2, r9
 4d2:	4661      	mov	r1, ip
 4d4:	6011      	str	r1, [r2, #0]
 4d6:	2284      	movs	r2, #132	; 0x84
 4d8:	4641      	mov	r1, r8
 4da:	0052      	lsls	r2, r2, #1
 4dc:	50a1      	str	r1, [r4, r2]
 4de:	2e02      	cmp	r6, #2
 4e0:	d1bb      	bne.n	45a <__register_exitproc+0x3a>
 4e2:	0002      	movs	r2, r0
 4e4:	465c      	mov	r4, fp
 4e6:	328d      	adds	r2, #141	; 0x8d
 4e8:	32ff      	adds	r2, #255	; 0xff
 4ea:	6811      	ldr	r1, [r2, #0]
 4ec:	430c      	orrs	r4, r1
 4ee:	6014      	str	r4, [r2, #0]
 4f0:	e7b3      	b.n	45a <__register_exitproc+0x3a>
 4f2:	0020      	movs	r0, r4
 4f4:	304d      	adds	r0, #77	; 0x4d
 4f6:	30ff      	adds	r0, #255	; 0xff
 4f8:	50e0      	str	r0, [r4, r3]
 4fa:	e7a7      	b.n	44c <__register_exitproc+0x2c>
 4fc:	6828      	ldr	r0, [r5, #0]
 4fe:	f7ff ff8d 	bl	41c <__retarget_lock_release_recursive>
 502:	2001      	movs	r0, #1
 504:	4240      	negs	r0, r0
 506:	e7b1      	b.n	46c <__register_exitproc+0x4c>
 508:	20000428 	.word	0x20000428
 50c:	00000514 	.word	0x00000514
 510:	00000000 	.word	0x00000000

00000514 <_global_impure_ptr>:
 514:	20000000                                ... 

00000518 <_init>:
 518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 51a:	46c0      	nop			; (mov r8, r8)
 51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 51e:	bc08      	pop	{r3}
 520:	469e      	mov	lr, r3
 522:	4770      	bx	lr

00000524 <__init_array_start>:
 524:	000003bd 	.word	0x000003bd

00000528 <__frame_dummy_init_array_entry>:
 528:	000000dd                                ....

0000052c <_fini>:
 52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 52e:	46c0      	nop			; (mov r8, r8)
 530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 532:	bc08      	pop	{r3}
 534:	469e      	mov	lr, r3
 536:	4770      	bx	lr

00000538 <__fini_array_start>:
 538:	000000b5 	.word	0x000000b5
